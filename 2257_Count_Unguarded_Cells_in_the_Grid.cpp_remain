class Solution {
public:
    //unguarded => 1
    //guarded => 0
    //guard present => 2
    //wall there => 3
    int countUnguarded(int m, int n, vector<vector<int>>& guards, vector<vector<int>>& walls) {
        vector<vector<int>>grid(m, vector<int>(n, 1));
        for(int i = 0; i < walls.size(); i++){
            grid[walls[i][0]][walls[i][1]] = 3;
        }
        for(int i = 0; i < guards.size(); i++){
            int x = guards[i][0];
            int y = guards[i][1];
            grid[x][y] = 2;
            // for cols up direction
            for(int r = x - 1; r >= 0; r--){
                if(grid[r][y] == 1) grid[r][y] = 0;
                else if(grid[r][y] == 3) break;
            }
            // for cols down direction
            for(int r = x + 1; r < m; r++){
                if(grid[r][y] == 1) grid[r][y] = 0;
                else if(grid[r][y] == 3) break;
            }
            // for rows left direction
            for(int c = y - 1; c >= 0; c--){
                if(grid[x][c] == 1) grid[x][c] = 0;
                else if(grid[x][c] == 3) break;
            }
            // for rows left direction
            for(int c = y + 1; c < n; c++){
                if(grid[x][c] == 1) grid[x][c] = 0;
                else if(grid[x][c] == 3) break;
            }
        }
        int ans = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 1) ans++; 
            }
        }
        return ans;
    }
};
