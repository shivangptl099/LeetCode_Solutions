class Solution {
public:
    int slidingPuzzle(vector<vector<int>>& board) {
        vector<vector<int>> directions = {{1, 3}, {0, 2, 4}, {1, 5}, {0, 4}, {1, 3, 5}, {2, 4}};
        string startState, target = "123450";
        for(auto r : board){
            for(auto c : r){
                startState += to_string(c);
            }
        }
        set<string> visited;
        queue<string> q;
        visited.insert(startState);
        q.push(startState);

        int ans = 0;
        while(!q.empty()){
            int n = q.size();
            while(n > 0){
                string curr = q.front();
                q.pop();
                if(curr == target) return ans;
                int zeroPos = curr.find('0');
                for(int newZeroPos : directions[zeroPos]){
                    string nextState = curr;
                    swap(nextState[zeroPos], nextState[newZeroPos]);
                    if(visited.count(nextState)) continue;
                    visited.insert(nextState);
                    q.push(nextState);
                }
                n--;
            }
            ans++;
        }
        return -1;
    }
};
